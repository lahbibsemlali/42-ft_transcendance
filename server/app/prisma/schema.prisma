// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  User
  Admin
  Owner
}

enum friendStatus {
  Accepted
  Rejected
  Pending
}

enum groupStatus {
  Private
  Protected
  Public
}

model Profile {
  userId       String
  user         User    @relation(fields: [userId], references: [id])
  username     String  @unique
  twoFA        Boolean @default(false)
  twoFASecrete String?  @unique
  avatar       String
  state        Int   @default(0)
  inGame        Boolean @default(false)
  wins          Int     @default(0)
  loses         Int     @default(0)
  @@unique([userId])
}

model User {
  id        String          @id @default(uuid())
  profile   Profile?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  chat      UserChat[]
  messages   Message[]
  roles     userRole[]
  send      Friendship[] @relation("send")
  receive   Friendship[] @relation("receive")
}

model Friendship {
  id        Int          @id @default(autoincrement())
  friend1Id String
  friend2Id String
  status    friendStatus @default(Pending)
  friend1   User         @relation(name: "send", fields: [friend1Id], references: [id])
  friend2   User         @relation(name: "receive", fields: [friend2Id], references: [id])
}

model Chat {
  id        Int        @id @default(autoincrement())
  name      String
  image     String
  isGroup   Boolean    @default(false)
  status    groupStatus @default(Public)
  lastMessage String?
  password  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  users     UserChat[]
  messages  Message[]
  userRoles userRole[]
}

model userRole {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  chatId    Int
  chat      Chat     @relation(fields: [chatId], references: [id])
  role      Role     @default(User)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserChat {
  // id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  chatId    Int
  chat      Chat     @relation(fields: [chatId], references: [id])
  
  dmName      String?
  dmImage     String?

  role      Role     @default(User)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chatId])
}

model Message {
  id        Int      @id @default(autoincrement())
  body      String
  createdAt DateTime @default(now())
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
}
